require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MonumentsController, :type => :controller do

  login_user
  # This should return the minimal set of attributes required to create a valid
  # Monument. As you add validations to Monument, be sure to
  # adjust the attributes here as well.
  let(:collection) { FactoryGirl.create(:collection) }
  let(:valid_attributes) {
    {name: 'Monument A', collection_id: collection.id}
  }

  let(:invalid_attributes) {
    {name: 'x'}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MonumentsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all monuments as @monuments" do
      monument = Monument.create! valid_attributes
      get :index, {collection_id: collection.id}, valid_session
      expect(assigns(:monuments)).to eq([monument])
    end
  end

  describe "GET show" do
    it "assigns the requested monument as @monument" do
      monument = Monument.create! valid_attributes
      get :show, {:id => monument.to_param, collection_id: collection.id}, valid_session
      expect(assigns(:monument)).to eq(monument)
    end
  end

  describe "GET new" do
    it "assigns a new monument as @monument" do
      get :new, {collection_id: collection.id}, valid_session
      expect(assigns(:monument)).to be_a_new(Monument)
    end
  end

  describe "GET edit" do
    it "assigns the requested monument as @monument" do
      monument = Monument.create! valid_attributes
      get :edit, {:id => monument.to_param, collection_id: collection.id}, valid_session
      expect(assigns(:monument)).to eq(monument)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Monument" do
        expect {
          post :create, {:monument => valid_attributes, collection_id: collection.id}, valid_session
        }.to change(Monument, :count).by(1)
      end

      it "assigns a newly created monument as @monument" do
        post :create, {:monument => valid_attributes, collection_id: collection.id}, valid_session
        expect(assigns(:monument)).to be_a(Monument)
        expect(assigns(:monument)).to be_persisted
      end

      it "redirects to the created monument" do
        post :create, {:monument => valid_attributes, collection_id: collection.id}, valid_session
        expect(response).to redirect_to(collection_monument_url(collection, Monument.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved monument as @monument" do
        post :create, {:monument => invalid_attributes, collection_id: collection.id}, valid_session
        expect(assigns(:monument)).to be_a_new(Monument)
      end

      it "re-renders the 'new' template" do
        post :create, {:monument => invalid_attributes, collection_id: collection.id}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {name: 'New name', new_category_name: 'new category'}
      }

      describe "when updates the requested monument" do
        before(:each) do
          @monument = Monument.create! valid_attributes
          put :update, {:id => @monument.to_param, :monument => new_attributes, collection_id: collection.id}, valid_session
          @monument.reload
        end
        it 'updates monument name' do
          expect(@monument.name).to eq(new_attributes[:name])
        end
        it 'creates a new category' do
          expect(Category.last.name).to eq(new_attributes[:new_category_name])
        end
      end

      it "assigns the requested monument as @monument" do
        monument = Monument.create! valid_attributes
        put :update, {:id => monument.to_param, :monument => valid_attributes, collection_id: collection.id}, valid_session
        expect(assigns(:monument)).to eq(monument)
      end

      it "redirects to the monument" do
        monument = Monument.create! valid_attributes
        put :update, {:id => monument.to_param, :monument => valid_attributes, collection_id: collection.id}, valid_session
        expect(response).to redirect_to(collection_monuments_url(collection))
      end
    end

    describe "with invalid params" do
      it "assigns the monument as @monument" do
        monument = Monument.create! valid_attributes
        put :update, {:id => monument.to_param, :monument => invalid_attributes, collection_id: collection.id}, valid_session
        expect(assigns(:monument)).to eq(monument)
      end

      it "re-renders the 'edit' template" do
        monument = Monument.create! valid_attributes
        put :update, {:id => monument.to_param, :monument => invalid_attributes, collection_id: collection.id}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested monument" do
      monument = Monument.create! valid_attributes
      expect {
        delete :destroy, {:id => monument.to_param, collection_id: collection.id}, valid_session
      }.to change(Monument, :count).by(-1)
    end

    it "redirects to the monuments list" do
      monument = Monument.create! valid_attributes
      delete :destroy, {:id => monument.to_param, collection_id: collection.id}, valid_session
      expect(response).to redirect_to(collection_monuments_url(collection))
    end
  end

end
